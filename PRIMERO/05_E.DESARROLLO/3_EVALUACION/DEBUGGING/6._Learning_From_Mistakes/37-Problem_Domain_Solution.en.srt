Aquí tienes el texto traducido siguiendo el mismo formato:

1
00:00:00,000 --> 00:00:03,000
La respuesta a eso es un claro sí.

2
00:00:03,000 --> 00:00:06,000
En estudios de Firefox y Eclipse

3
00:00:06,000 --> 00:00:09,000
encontramos una característica específica del código

4
00:00:09,000 --> 00:00:12,000
que dominaba a todas las demás.

5
00:00:12,000 --> 00:00:15,000
Estos eran los *imports* realizados por módulos individuales.

6
00:00:15,000 --> 00:00:21,000
Es decir, los otros módulos con los que el módulo en cuestión interactuaba.

7
00:00:21,000 --> 00:00:25,000
Más específicamente, lo que un módulo importaba

8
00:00:25,000 --> 00:00:29,000
determinaba su probabilidad de tener un defecto.

9
00:00:29,000 --> 00:00:37,000
En Firefox, por ejemplo, si tu módulo incluía nsIPrivateDOMEvent.h

10
00:00:37,000 --> 00:00:45,000
y nsReadableutils.h, es decir, usaba estas APIs específicas o interactuaba con ellas,

11
00:00:45,000 --> 00:00:49,000
entonces tu código estaría condenado.

12
00:00:49,000 --> 00:00:54,000
Porque 20 módulos que también incluían estos dos archivos

13
00:00:54,000 --> 00:00:57,000
tenían al menos un problema de seguridad.

14
00:00:57,000 --> 00:01:04,000
De igual manera, en Eclipse si importabas algo que trataba con características internas

15
00:01:04,000 --> 00:01:11,000
del compilador, tu código sería 4-5 veces más propenso a errores que el código que solo trataba

16
00:01:11,000 --> 00:01:13,000
con una interfaz gráfica de usuario.

17
00:01:13,000 --> 00:01:15,000
¿Por qué es así?

18
00:01:15,000 --> 00:01:20,000
Bueno, si escribes "importar compilador interno", esto significa que vas a escribir código de compilador,

19
00:01:20,000 --> 00:01:25,000
y el código de compilador es más propenso a errores que el código de interfaz de usuario,

20
00:01:25,000 --> 00:01:29,000
en particular porque si trabajas con una interfaz de usuario,

21
00:01:29,000 --> 00:01:35,000
la mayoría de los errores que cometas serán inmediatamente visibles para el ojo humano.

22
00:01:35,000 --> 00:01:38,000
Mientras que si trabajas con elementos internos del compilador,

23
00:01:38,000 --> 00:01:46,000
es un largo camino desde un error en el compilador hasta un error en el programa compilado real,

24
00:01:46,000 --> 00:01:53,000
que luego, nuevamente, debe ejecutarse para que el error cause una falla.

25
00:01:53,000 --> 00:01:57,000
Ninguna de estas causas necesita ser descubierta de inmediato.

26
00:01:57,000 --> 00:02:02,000
Todas estas son razones por las cuales este dominio, a saber, el compilador,

27
00:02:02,000 --> 99:59:59,000
es mucho más propenso a errores que la interfaz de usuario.