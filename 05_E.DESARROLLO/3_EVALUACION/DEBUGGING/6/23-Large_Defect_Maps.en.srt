1
00:00:00,000 --> 00:00:04,000
The interesting thing is that we can do this

2
00:00:04,000 --> 00:00:07,000
for all parts of the program.

3
00:00:07,000 --> 00:00:09,000
For every single function in the program,

4
00:00:09,000 --> 00:00:14,000
we can look up the changes and find out which problems

5
00:00:14,000 --> 00:00:19,000
were addressed in that specific file or in that specific function.

6
00:00:19,000 --> 00:00:24,000
What we get this way is a defect count for every single location.

7
00:00:24,000 --> 00:00:33,000
That is, the number of problems that have been fixed in that very file or function.

8
00:00:33,000 --> 00:00:39,000
In 2007, my students and I built such a tool that would create

9
00:00:39,000 --> 00:00:45,000
such a mapping from the version databases and problem databases

10
00:00:45,000 --> 00:00:47,000
of open source programs.

11
00:00:47,000 --> 00:00:54,000
For instance, we would apply this on Firefox--the web browser--

12
00:00:54,000 --> 00:00:58,000
in order to find out where the most defects were.

13
00:00:58,000 --> 00:01:02,000
More specifically, we would be looking at security defects--

14
00:01:02,000 --> 00:01:07,000
that is, problems that relate to security issues.

15
00:01:07,000 --> 00:01:13,000
What we would get is precisely the location where the most

16
00:01:13,000 --> 99:59:59,000
security bugs would be.
