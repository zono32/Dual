1
00:00:00,000 --> 00:00:03,000
The answer to that is a clear yes.

2
00:00:03,000 --> 00:00:06,000
In studies of Firefox and Eclipse

3
00:00:06,000 --> 00:00:09,000
we found one specific feature of the code

4
00:00:09,000 --> 00:00:12,000
that dominated all others.

5
00:00:12,000 --> 00:00:15,000
These were the imports made by individual modules.

6
00:00:15,000 --> 00:00:21,000
That is, the other modules that the module in question would interact with.

7
00:00:21,000 --> 00:00:25,000
More specifically, whatever a module imported

8
00:00:25,000 --> 00:00:29,000
would determine its likelihood to have a defect.

9
00:00:29,000 --> 00:00:37,000
In Firefox, for instance, if you're module included nsIPrivateDOMEvent.h

10
00:00:37,000 --> 00:00:45,000
and nsReadableutils.h--that is, used these specific APIs or interacted with these specific APIs,

11
00:00:45,000 --> 00:00:49,000
then you're code would be doomed.

12
00:00:49,000 --> 00:00:54,000
Because 20 modules that also included these two files

13
00:00:54,000 --> 00:00:57,000
l had at least one security issue.

14
00:00:57,000 --> 00:01:04,000
Likewise, in Eclipse if you imported something that dealt with internal features

15
00:01:04,000 --> 00:01:11,000
of the compiler, your code would be 4-5 times as error prone as code that only dealt

16
00:01:11,000 --> 00:01:13,000
with a graphical user interface.

17
00:01:13,000 --> 00:01:15,000
Why is that so?

18
00:01:15,000 --> 00:01:20,000
Well, if you write import compiler internal, this means you're going to write some compiler code,

19
00:01:20,000 --> 00:01:25,000
and compiler code is more error prone than user interface code,

20
00:01:25,000 --> 00:01:29,000
in particular because if you worked with a user interface,

21
00:01:29,000 --> 00:01:35,000
most errors you make will be immediately visible to the human eye.

22
00:01:35,000 --> 00:01:38,000
Whereas if you deal with compiler internals,

23
00:01:38,000 --> 00:01:46,000
it's a long path from a bug in the compiler to a bug in the actual compiled program,

24
00:01:46,000 --> 00:01:53,000
which then, again, has to be executed in order to have the bug cause a failure.

25
00:01:53,000 --> 00:01:57,000
None of this cause needs to be discovered right away.

26
00:01:57,000 --> 00:02:02,000
All of these are reasons why this domain, namely the compiler,

27
00:02:02,000 --> 99:59:59,000
is way more error prone than the user interface.
