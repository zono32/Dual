
1
00:00:00,000 --> 00:00:05,000
No hace falta decir que Sherlock Holmes sería un excelente depurador de programas

2
00:00:05,000 --> 00:00:07,000
si viviera en estos días.

3
00:00:07,000 --> 00:00:10,000
El problema que tenemos delante puede enunciarse de la siguiente manera:

4
00:00:10,000 --> 00:00:16,000
"Sucedió algo imposible y la única información sólida es que ocurrió.

5
00:00:16,000 --> 00:00:21,000
Por lo tanto, debemos pensar hacia atrás desde el resultado para descubrir las razones."

6
00:00:21,000 --> 00:00:25,000
Cita de Kernighan y Pike, "La práctica de la programación"

7
00:00:25,000 --> 00:00:28,000
Pensar hacia atrás desde el resultado.

8
00:00:28,000 --> 00:00:32,000
Este es el arte de la deducción aplicado a la depuración.

9
00:00:32,000 --> 00:00:36,000
Permíteme ilustrar cómo funciona esto usando un ejemplo familiar.

10
00:00:36,000 --> 00:00:40,000
Aquí nuevamente tenemos una función para eliminar las marcas de HTML.

11
00:00:40,000 --> 00:00:46,000
Solo como recordatorio, lo que se supone que esta función debe hacer es tomar una entrada HTML

12
00:00:46,000 --> 00:00:53,000
como esta: un texto foo rodeado de etiquetas HTML,

13
00:00:53,000 --> 00:00:58,000
una para activar el formato en negrita y otra para desactivar el formato en negrita,

14
00:00:58,000 --> 00:01:04,000
y convertirlo en un texto en el que se haya eliminado el marcado HTML.

15
00:01:04,000 --> 00:01:07,000
Esto hace uso de varias variables:

16
00:01:07,000 --> 00:01:13,000
Tag verifica si actualmente estamos procesando una etiqueta.

17
00:01:13,000 --> 00:01:17,000
Es decir, durante estos tres caracteres, tag debería ser verdadero.

18
00:01:17,000 --> 00:01:22,000
Y solo si no estamos en modo de etiqueta, realmente agregamos

19
00:01:22,000 --> 00:01:25,000
los caracteres a la variable out.

20
00:01:25,000 --> 00:01:30,000
Y la variable out al final es devuelta.

21
00:01:30,000 --> 00:01:32,000
Entonces, mientras procesamos este código,

22
00:01:32,000 --> 00:01:35,000
tag sería verdadero para estos tres caracteres.

23
00:01:35,000 --> 00:01:38,000
Luego, tag sería falso.

24
00:01:38,000 --> 00:01:40,000
F-O-O se agregaría a la salida.

25
00:01:40,000 --> 00:01:45,000
Finalmente, tendríamos 4 caracteres de etiqueta más que no se agregarían.

26
00:01:45,000 --> 00:01:48,000
Al final, lo que obtenemos es esta cadena: foo.

27
00:01:48,000 --> 00:01:52,000
Ahora practiquemos el arte de la deducción en este ejemplo

28
00:01:52,000 --> 00:01:57,000
simplemente a partir de la observación de que esta afirmación final

29
00:01:57,000 --> 00:01:59,000
ha fallado.

30
00:01:59,000 --> 00:02:04,000
Así que todo lo que sabemos es que de hecho este código puede producir un resultado

31
00:02:04,000 --> 00:02:08,000
en el que el marcado HTML todavía está presente.

32
00:02:08,000 --> 00:02:12,000
Esta es la observación desde la que comenzamos.

33
00:02:12,000 --> 00:02:14,000
Vamos a pensar hacia atrás

34
00:02:14,000 --> 00:02:17,000
cómo la afirmación posiblemente podría haber fallado.

35
00:02:17,000 --> 00:02:23,000
Lo que sabemos es que out contiene una etiqueta de apertura

36
00:02:23,000 --> 00:02:26,000
que es un carácter de menor que.

37
00:02:26,000 --> 00:02:29,000
El único lugar donde este carácter podría haber sido agregado

38
00:02:29,000 --> 00:02:32,000
a la variable out es aquí.

39
00:02:32,000 --> 00:02:38,000
Para llegar a esa línea, se deben cumplir varias condiciones.

40
00:02:38,000 --> 00:02:41,000
Todas estas condiciones no pueden haber fallado.

41
00:02:41,000 --> 00:02:46,000
Mientras que esta debe haber fallado.

42
00:02:46,000 --> 00:02:49,000
Centrémonos en la variable tag aquí.

43
00:02:49,000 --> 00:02:51,000
¿Cuál era el valor de la variable tag

44
00:02:51,000 --> 00:02:53,000
cuando se agregó el signo de menor que?

45
00:02:53,000 --> 99:59:59,000
Te toca a ti.
```

12
00:00:46,000 --> 00:00:53,000
such as this one: a foo text enclosed into HTML tags,

13
00:00:53,000 --> 00:00:58,000
one to switch on bold rendering and one to switch off bold rendering,

14
00:00:58,000 --> 00:01:04,000
and to turn this into a text in which the HTML markup has been removed.

15
00:01:04,000 --> 00:01:07,000
This makes use of a number of variables:

16
00:01:07,000 --> 00:01:13,000
Tag checks whether we currently are processing a tag.

17
00:01:13,000 --> 00:01:17,000
That is, during these three characters, tag should be true.

18
00:01:17,000 --> 00:01:22,000
And only if we are not in tag mode do we actually add

19
00:01:22,000 --> 00:01:25,000
the characters to the out variable.

20
00:01:25,000 --> 00:01:30,000
And the out variable at the end is being returned.

21
00:01:30,000 --> 00:01:32,000
So while we are processing this code,

22
00:01:32,000 --> 00:01:35,000
tag would be true for these three characters.

23
00:01:35,000 --> 00:01:38,000
Then tag would be false.

24
00:01:38,000 --> 00:01:40,000
F-O-O would be added to the output.

25
00:01:40,000 --> 00:01:45,000
Finally, we would have 4 more tag characters which would not be added.

26
00:01:45,000 --> 00:01:48,000
In the end, what we get is this string: foo.

27
00:01:48,000 --> 00:01:52,000
Now let's practice the art of deduction on this example

28
00:01:52,000 --> 00:01:57,000
simply from the observation that this final assertion

29
00:01:57,000 --> 00:01:59,000
has failed.

30
00:01:59,000 --> 00:02:04,000
So all we know is that indeed this code can produce an output

31
00:02:04,000 --> 00:02:08,000
in which HTML markup is still present.

32
00:02:08,000 --> 00:02:12,000
This is the observation from which we start.

33
00:02:12,000 --> 00:02:14,000
Let's go and think backwards

34
00:02:14,000 --> 00:02:17,000
how the assertion possibly could have failed.

35
00:02:17,000 --> 00:02:23,000
What we know is that out contains an opening tag

36
00:02:23,000 --> 00:02:26,000
that is a less-than character.

37
00:02:26,000 --> 00:02:29,000
The only place where this character could have been added

38
00:02:29,000 --> 00:02:32,000
to the out variable is here.

39
00:02:32,000 --> 00:02:38,000
In order to reach that line, a number of conditions must be fulfilled.

40
00:02:38,000 --> 00:02:41,000
All of these conditions cannot have failed.

41
00:02:41,000 --> 00:02:46,000
Whereas this one must have failed.

42
00:02:46,000 --> 00:02:49,000
Let's focus on the tag variable here.

43
00:02:49,000 --> 00:02:51,000
What was the value of the tag variable

44
00:02:51,000 --> 00:02:53,000
when the less-than sign had been added?

45
00:02:53,000 --> 99:59:59,000
Over to you.
