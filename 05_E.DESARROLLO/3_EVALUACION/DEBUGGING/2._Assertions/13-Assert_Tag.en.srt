1
00:00:00,000 --> 00:00:03,000
Las aserciones en el código llegaron para quedarse.

2
00:00:03,000 --> 00:00:09,000
Las utilizamos para atrapar errores, lo que también podemos usar al realizar pruebas, pero también sirven

3
00:00:09,000 --> 00:00:14,000
como una herramienta de documentación para programadores porque muestran cuáles son las suposiciones

4
00:00:14,000 --> 00:00:19,000
de los métodos individuales y qué es lo que se supone que debe producir el método individual.

5
00:00:19,000 --> 00:00:23,000
Y apliquemos aserciones a otro programa, un viejo favorito nuestro:

6
00:00:23,000 --> 00:00:26,000
nuestro depurador HTML con errores de la primera unidad.

7
00:00:26,000 --> 00:00:29,000
Así que aquí nuevamente tenemos la función para eliminar etiquetas HTML,

8
00:00:29,000 --> 00:00:31,000
que ya conocemos de la primera unidad.

9
00:00:31,000 --> 00:00:36,000
Aquí también, una simple aserción hubiera sido suficiente para atrapar el error, principalmente una aserción

10
00:00:36,000 --> 00:00:40,000
que verifica la no existencia de etiquetas HTML en la salida.

11
00:00:40,000 --> 00:00:46,000
Tal aserción podría ser algo así: simplemente verificamos si hay algún signo de menor que

12
00:00:46,000 --> 00:00:49,000
que sea el comienzo de una etiqueta HTML en la salida.

13
00:00:49,000 --> 00:00:53,000
Vemos que no hay ninguno y si hubiera uno, entonces la aserción fallaría inmediatamente.

14
00:00:53,000 --> 00:00:55,000
Aquí viene la pregunta.

15
00:00:55,000 --> 00:01:00,000
Con esta aserción, ¿qué entrada haría que la aserción generara una excepción?

16
00:01:00,000 --> 00:01:08,000
¿Es "foo" en negrita, es "foo" entre comillas y en negrita, es "foo" en negrita y entre comillas,

17
00:01:08,000 --> 00:01:11,000
o es "foo" en negrita y entre comillas simples?

18
00:01:11,000 --> 99:59:59,000
¿Cuál de estas hace que la aserción falle? Adelante.