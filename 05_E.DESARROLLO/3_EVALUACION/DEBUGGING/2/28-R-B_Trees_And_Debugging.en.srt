1
00:00:00,000 --> 00:00:04,000
Here's our invariant checker for the class Red-Black tree.

2
00:00:04,000 --> 00:00:08,000
You want to make sure that the root node is black. You can make a mistake.

3
00:00:08,000 --> 00:00:12,000
Let's say move the self-tree up here and all of the sudden the root becomes red.

4
00:00:12,000 --> 00:00:14,000
This assertion will take care of this.

5
00:00:14,000 --> 00:00:18,000
And as you can see here, we're setting up helper functions in order to break down

6
00:00:18,000 --> 00:00:21,000
the invariant into manageable small pieces.

7
00:00:21,000 --> 00:00:24,000
We want to make sure that there are no cycles in the tree.

8
00:00:24,000 --> 00:00:28,000
We want to make sure that pointers to parents are consistent.

9
00:00:28,000 --> 00:00:33,000
That is, if some node points to its parent then it should also be a child of this array parent.

10
00:00:33,000 --> 00:00:39,000
We want to make sure that in both subtrees the number of black nodes is equal.

11
00:00:39,000 --> 00:00:43,000
That's a nice long function name, which says it all.

12
00:00:43,000 --> 00:00:48,000
And finally, you want to make sure that red nodes have only black children

13
00:00:48,000 --> 00:00:51,000
and at the same time black nodes only have red children.

14
00:00:51,000 --> 00:00:56,000
I'm not sure whether we need to make this a separate method.

15
00:00:56,000 --> 00:01:00,000
Somehow these checkers are rather trivial. That is, one-liners.

16
00:01:00,000 --> 00:01:06,000
Others require a traversal of the anti-tree and would typically call themselves recursively.

17
00:01:06,000 --> 00:01:12,000
And now for every single method that change the state, you can now invoke the invariant checker.

18
00:01:12,000 --> 00:01:16,000
You do so at the beginning. You do so at the end.

19
00:01:16,000 --> 00:01:20,000
And when all of your assertions pass, then you can be sure that your Red-Black tree

20
00:01:20,000 --> 00:01:22,000
never ever becomes corrupted.

21
00:01:22,000 --> 00:01:27,000
However, if something goes wrong, it would get the error message at the very moment

22
00:01:27,000 --> 00:01:29,000
you make the Red-Black tree inconsistent.

23
00:01:29,000 --> 00:01:35,000
You will get the precise assertion that failed and you won't implant any time bombs

24
00:01:35,000 --> 00:01:40,000
because if the precondition is satisfied and if the postcondition is violated

25
00:01:40,000 --> 00:01:44,000
you know that it is precisely this method--the insert method in this case--

26
00:01:44,000 --> 00:01:47,000
that caused the data invariant to be violated.

27
00:01:47,000 --> 00:01:52,000
This thing about Red-Black trees actually is a sort of a personal thing for me.

28
00:01:52,000 --> 00:01:56,000
Ten years ago, when I was a teaching assistant, my professor had the cool idea

29
00:01:56,000 --> 00:02:00,000
to have the students implement Red-Black trees as a programming exercise.

30
00:02:00,000 --> 00:02:05,000
And we as teaching assistants, had the cool idea to come up with a real hard

31
00:02:05,000 --> 00:02:10,000
automated testing for the student assignments, which turned out a disastrous combination

32
00:02:10,000 --> 00:02:12,000
because writing a Red-Black tree is one thing

33
00:02:12,000 --> 00:02:15,000
and writing a Red-Black tree that works is another.

34
00:02:15,000 --> 00:02:19,000
At this time, I did not really know how to debug and neither did my students

35
00:02:19,000 --> 00:02:24,000
and neither did my professor so we as teaching assistants would be sitting with our students

36
00:02:24,000 --> 00:02:29,000
for hours and hours and hours in the night stepping and stepping and stepping

37
00:02:29,000 --> 00:02:35,000
through the program and try to figure out where on earth on the umpteenth insert operation

38
00:02:35,000 --> 00:02:41,000
this particular pointer would finally be moved to this other location, which was a total pain to figure out.

39
00:02:41,000 --> 00:02:45,000
In particular with regular debuggers, we typically step over the whole thing

40
00:02:45,000 --> 00:02:50,000
and then finally lose the moment so you'd have to restart again and restart again.

41
00:02:50,000 --> 00:02:55,000
And if I think about how many hours probably days and weeks

42
00:02:55,000 --> 00:03:00,000
I have lost digging through these data structures whereas with a single invariant checker

43
00:03:00,000 --> 99:59:59,000
I could've found them in minutes I'm still somewhat sorry.
