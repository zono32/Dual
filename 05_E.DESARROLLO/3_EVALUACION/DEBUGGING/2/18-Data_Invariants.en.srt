1
00:00:00,000 --> 00:00:08,000
At this point we have seen that writing perfect assertions that cover all bugs and are pretty hard,

2
00:00:08,000 --> 00:00:13,000
but this shouldn't keep us from writing assertion that catch as many bugs as possible,

3
00:00:13,000 --> 00:00:16,000
and this is particularly useful in debugging.

4
00:00:16,000 --> 00:00:19,000
Since assertions are automated, they can check

5
00:00:19,000 --> 00:00:24,000
several executions of a function at once--actually all executions.

6
00:00:24,000 --> 00:00:29,000
However, they can also check large portions of data at the same time and all automated.

7
00:00:29,000 --> 00:00:34,000
What do I mean by large portions of data? Let me illustrate this by an example.

8
00:00:34,000 --> 00:00:37,000
Let's assume we want to implement a time class.

9
00:00:37,000 --> 00:00:42,000
A time that consists of hours, minutes, and seconds and we want to use assertions

10
00:00:42,000 --> 00:00:46,000
to automatically check whether a time object is consistent.

11
00:00:46,000 --> 00:00:50,000
That is whether the hours are in the right range, minutes are in the right range,

12
00:00:50,000 --> 00:00:52,000
and seconds are also in the right range.

13
00:00:52,000 --> 00:00:57,000
Here is our time class--we start with an initializer or a constructor that takes

14
00:00:57,000 --> 00:01:00,000
three arguments--the hour, the minute, and the second

15
00:01:00,000 --> 00:01:05,000
with default values of 0 for each and we assign these to individual attributes

16
00:01:05,000 --> 00:01:09,000
in hours, minutes, and seconds within a time object.

17
00:01:09,000 --> 00:01:13,000
Here's a number of inspector method that gives us access to the internal attributes--

18
00:01:13,000 --> 00:01:15,000
hours, minutes, and seconds.

19
00:01:15,000 --> 00:01:20,000
After adding inspector methods that gives us the hours, the minutes, and the seconds,

20
00:01:20,000 --> 00:01:23,000
we now need a way to print out the time object.

21
00:01:23,000 --> 00:01:30,000
For this, Python provides a special method. It is called the repr for representation method.

22
00:01:30,000 --> 00:01:35,000
The internal method with two underscores before and after and what this thing does is

23
00:01:35,000 --> 00:01:40,000
this method is called whenever an object of the particular class is to be printed,

24
00:01:40,000 --> 00:01:44,000
and this returns a string representation of the object.

25
00:01:44,000 --> 00:01:50,000
So what does it do, we're using the string format method here, which takes a number of arguments,

26
00:01:50,000 --> 00:01:55,000
and format each of these arguments given to the format specification written here in that string.

27
00:01:55,000 --> 00:02:02,000
So for instance :2d prints the numerical argument here with two digits--

28
00:02:02,000 --> 00:02:07,000
self minutes also comes in two digits, self seconds also comes in two digits.

29
00:02:07,000 --> 00:02:09,000
This format is not perfect yet.

30
00:02:09,000 --> 00:02:11,000
We actually wants leading zeros in here

31
00:02:11,000 --> 00:02:16,000
and we want hours, minutes, and seconds separated by colons.

32
00:02:16,000 --> 00:02:22,000
So here's a string, first the hours two digits leading zero, then the minutes two digits leading zero,

33
00:02:22,000 --> 00:02:25,000
and then the seconds two digits leading zero.

34
00:02:25,000 --> 00:02:27,000
Let's try out how this works

35
00:02:27,000 --> 00:02:32,000
I'm initializing a time object here 13 hours, 0 minutes, 0 seconds.

36
00:02:32,000 --> 00:02:36,000
We're using a 24-hour clock here and I'm printing this out.

37
00:02:36,000 --> 00:02:40,000
In printing this out should now invoke this repr method, which would automatically

38
00:02:40,000 --> 00:02:43,000
provide a nice string representation of our time.

39
00:02:43,000 --> 00:02:46,000
Let's run this whole thing and we get nice representation

40
00:02:46,000 --> 99:59:59,000
13 hours, 0 minutes, and 0 seconds, 1 pm in the afternoon.
