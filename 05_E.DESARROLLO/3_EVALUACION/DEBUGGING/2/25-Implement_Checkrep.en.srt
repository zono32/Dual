1
00:00:00,000 --> 00:00:04,000
Let's whether you can come up with an invariant check of function yourself.

2
00:00:04,000 --> 00:00:07,000
As an example, we're going to use zip code.

3
00:00:07,000 --> 00:00:11,000
The zip code is what you need to address a letter to a specific address.

4
00:00:11,000 --> 00:00:17,000
The zip code is a number or in some countries a sequence of numbers and letters

5
00:00:17,000 --> 00:00:19,000
that identifies a specific region in some country.

6
00:00:19,000 --> 00:00:22,000
For our example, we're going to use American zip code,

7
00:00:22,000 --> 00:00:26,000
which in their most basic form are five digits,

8
00:00:26,000 --> 00:00:30,000
and those five digits go from five zero to five nine

9
00:00:30,000 --> 00:00:34,000
that is each of the five digits is between zero and nine.

10
00:00:34,000 --> 00:00:36,000
So, here's a zip code class.

11
00:00:36,000 --> 00:00:38,000
Again, we have a constructor, which takes the zip code

12
00:00:38,000 --> 00:00:41,000
which is a string consisting out of five digits.

13
00:00:41,000 --> 00:00:45,000
We set zip, internal zip attribute to the string--again, five digits.

14
00:00:45,000 --> 00:00:49,000
We also have a method to retrieve the zip code again as a string

15
00:00:49,000 --> 00:00:53,000
and now we need to come up with an appropriate representation checker

16
00:00:53,000 --> 00:00:56,000
invariant checker that checks whether the state is okay.

17
00:00:56,000 --> 00:01:02,000
We could, for instance, start with making sure that the length of the zip code is precisely five.

18
00:01:02,000 --> 00:01:05,000
Now, go and complete the invariant checker such that

19
00:01:05,000 --> 00:01:07,000
the content of the string is also checked

20
00:01:07,000 --> 99:59:59,000
such that each of the digits is between zero and nine over to you.
