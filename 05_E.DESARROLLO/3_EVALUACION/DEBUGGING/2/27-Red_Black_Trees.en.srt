1
00:00:00,000 --> 00:00:04,000
We have seen that with assertions we can ensure that objects

2
00:00:04,000 --> 00:00:06,000
are in the same state all the time.

3
00:00:06,000 --> 00:00:11,000
You can imagine that this would be most useful for large, complex data structures.

4
00:00:11,000 --> 00:00:15,000
That is, structures with lots and lots of invariance that need to be maintained

5
00:00:15,000 --> 00:00:19,000
or that could possibly be violated due to programming errors.

6
00:00:19,000 --> 00:00:24,000
Let me illustrate this with one of the most devilish data structures ever invented,

7
00:00:24,000 --> 00:00:26,000
which is a Red-Black tree.

8
00:00:26,000 --> 00:00:28,000
Here's an example of a Red-Black tree.

9
00:00:28,000 --> 00:00:32,000
A Red-Black tree is a data structure to represent associative arrays

10
00:00:32,000 --> 00:00:34,000
also known as mappings.

11
00:00:34,000 --> 00:00:36,000
If I want to search an element in a Red-Black tree,

12
00:00:36,000 --> 00:00:39,000
I can do so in an almost logarithmic time.

13
00:00:39,000 --> 00:00:42,000
And I'll do so as in all search trees by checking whether the element

14
00:00:42,000 --> 00:00:47,000
I'm searching for is smaller or larger than the element I'm looking at.

15
00:00:47,000 --> 00:00:51,000
Suppose I want to check whether the number 22 is in my Red-Black tree.

16
00:00:51,000 --> 00:00:56,000
I start at the root, which is 13. I'm looking for 22, which is larger than 13.

17
00:00:56,000 --> 00:01:02,000
So I go along the right branch. 22 is larger than 17 so again I go along the right branch.

18
00:01:02,000 --> 00:01:06,000
22 is smaller than 25 so now I go along the left branch,

19
00:01:06,000 --> 00:01:09,000
and here I end up exactly in the element I was searching for.

20
00:01:09,000 --> 00:01:13,000
Red-Black trees do not only guarantee search in logarithmic time

21
00:01:13,000 --> 00:01:19,000
but also insertion and also deletion, which makes them a real nice choice

22
00:01:19,000 --> 00:01:22,000
for all sorts of search operations.

23
00:01:22,000 --> 00:01:24,000
But they also are very, very difficult to debug.

24
00:01:24,000 --> 00:01:28,000
The reason they're difficult to debug is they do have a number of properties

25
00:01:28,000 --> 00:01:31,000
that must be maintained at all times.

26
00:01:31,000 --> 00:01:35,000
To start with, they always must be trees. You can't have any cycle in it.

27
00:01:35,000 --> 00:01:39,000
A black node must have red children, and a red node must have black children.

28
00:01:39,000 --> 00:01:43,000
The number of elements in the subtrees should be fairly equal

29
00:01:43,000 --> 00:01:48,000
with respect to the number of black nodes, and if some element points to a child

30
00:01:48,000 --> 00:01:53,000
the child maintains the pointer then this should point back to the existing parent.

31
00:01:53,000 --> 00:01:58,000
So search in Red-Black tree is easy but insertion and removal are really complicated.

32
00:01:58,000 --> 00:02:02,000
To get an idea just how complicated they are, let's take a look on Wikipedia

33
00:02:02,000 --> 00:02:04,000
what they wrote about Red-Black trees.

34
00:02:04,000 --> 00:02:07,000
So this is the Wikipedia page on Red-Black trees.

35
00:02:07,000 --> 00:02:11,000
Here's the insertion. These are two helper functions, grandparent and uncle.

36
00:02:11,000 --> 00:02:19,000
Now we go to 1, 2, 3 different cases all with individual code that needs to be handled.

37
00:02:19,000 --> 00:02:22,000
Here's case number 4, and here's case number 5.

38
00:02:22,000 --> 00:02:26,000
Removal is even more complicated. This is the formal description.

39
00:02:26,000 --> 00:02:28,000
We need a helper function called the sibling.

40
00:02:28,000 --> 00:02:32,000
Here's a helper function to delete one child, which is easy.

41
00:02:32,000 --> 00:02:38,000
And now come all the special casesâ€”case 1, case 2, case 3, case 4, case 5, and case 6.

42
00:02:38,000 --> 00:02:44,000
And of course, you can imagine how easy it is to make mistakes in any of these cases.

43
00:02:44,000 --> 00:02:47,000
It would have some pointer pointing to the wrong node,

44
00:02:47,000 --> 00:02:51,000
and again it would easily create lots and lots of time bombs

45
00:02:51,000 --> 00:02:54,000
which is why we normally do not implement Red-Black trees

46
00:02:54,000 --> 00:02:58,000
but we rather rely on Red-Black trees as implemented in some library.

47
00:02:58,000 --> 00:03:01,000
However, if you were to implement a Red-Black tree,

48
00:03:01,000 --> 00:03:05,000
let's say part of a programming exercise for instance, it's cool.

49
00:03:05,000 --> 00:03:09,000
Or you're working on something that's similar to a Red-Black tree,

50
00:03:09,000 --> 00:03:11,000
but which doesn't have yet its page in the Wikipedia.

51
00:03:11,000 --> 00:03:15,000
Then you really need to make sure that you don't screw up things

52
00:03:15,000 --> 00:03:17,000
and that you don't create a time bomb in here.

53
00:03:17,000 --> 00:03:20,000
If you work on a data structure as complex as this,

54
00:03:20,000 --> 99:59:59,000
the very first thing you need to write in an invariant checker.
