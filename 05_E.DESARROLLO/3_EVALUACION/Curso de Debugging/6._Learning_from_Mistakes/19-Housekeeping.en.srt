1
00:00:00,000 --> 00:00:04,000
As your problem database fills up with more and more problem reports

2
00:00:04,000 --> 00:00:08,000
over time you'll want to do some housekeeping.

3
00:00:08,000 --> 00:00:15,000
Because as these databases fill up, there are a number of issues that pile up as well.

4
00:00:15,000 --> 00:00:17,000
The first one is duplicates.

5
00:00:17,000 --> 00:00:20,000
If you have one user who's reporting a problem

6
00:00:20,000 --> 00:00:24,000
chances are that other users will be reporting just the same problem.

7
00:00:24,000 --> 00:00:29,000
That is, you have multiple problem reports that all relate to the same class of failures.

8
00:00:29,000 --> 00:00:32,000
These problem reports are call duplicates.

9
00:00:32,000 --> 00:00:35,000
As a manager, your task is to identify such duplicates.

10
00:00:35,000 --> 00:00:40,000
You want to do so in order to avoid them cluttering the statistics,

11
00:00:40,000 --> 00:00:44,000
but you also want the duplicates to refer to each other.

12
00:00:44,000 --> 00:00:47,000
This way when you come across a problem report,

13
00:00:47,000 --> 00:00:52,000
you will find, hey, this is a duplicate of this original bug report,

14
00:00:52,000 --> 00:00:55,000
and all of these others are also duplicates.

15
00:00:55,000 --> 00:00:59,000
You like to keep the duplicates, though, in your database,

16
00:00:59,000 --> 00:01:02,000
because all of these may report on different angles of the problem

17
00:01:02,000 --> 00:01:06,000
and these angles may all be helpful for resolving the problem.

18
00:01:06,000 --> 00:01:11,000
Note that automatic diagnosis mechanisms, such as statistical debugging

19
00:01:11,000 --> 00:01:15,000
or delta debugging, are great tools for identifying duplicates

20
00:01:15,000 --> 00:01:21,000
because they'll find commonalities between all the individual bug reports

21
00:01:21,000 --> 00:01:27,000
with respect to similar features in the input or in the execution.

22
00:01:27,000 --> 00:01:29,000
Next up is obsolete problems.

23
00:01:29,000 --> 00:01:34,000
Over time your database will fill up with unresolved problem reports--

24
00:01:34,000 --> 00:01:39,000
problems could not reproduced or problems that may have been fixed in some later version

25
00:01:39,000 --> 00:01:41,000
and low-priority problems.

26
00:01:41,000 --> 00:01:45,000
Having thousands of unresolved problems will drag developers down.

27
00:01:45,000 --> 00:01:48,000
They clutter up searches in the database,

28
00:01:48,000 --> 00:01:50,000
and they are bad for the morale.

29
00:01:50,000 --> 00:01:54,000
A problem database that has plenty of obsolete problems is like

30
00:01:54,000 --> 00:01:57,000
an overflowing drawer of socks.

31
00:01:57,000 --> 00:02:01,000
You don't find the socks you need, and the drawer makes you feel guilty

32
00:02:01,000 --> 00:02:04,000
for not throwing away your old socks.

33
00:02:04,000 --> 00:02:11,000
What you should do is over time simply declare problem reports obsolete

34
00:02:11,000 --> 00:02:16,000
and thus get rid of socks you don't want anymore.

35
00:02:16,000 --> 00:02:18,000
When is a problem obsolete?

36
00:02:18,000 --> 00:02:21,000
A problem is obsolete if it will never be fixed.

37
00:02:21,000 --> 00:02:24,000
For instance, because the program is no longer supported

38
00:02:24,000 --> 00:02:28,000
or the problem is old and occurred only once

39
00:02:28,000 --> 00:02:31,000
or the problem is old and occurred only internally.

40
00:02:31,000 --> 00:02:34,000
You don't want to actually delete these problems,

41
00:02:34,000 --> 00:02:37,000
but you can tag them with an appropriate resolution.

42
00:02:37,000 --> 00:02:44,000
In Bugzilla, for instance, there is a special WONTFIX resolution for such obsolete problems.

43
00:02:44,000 --> 00:02:48,000
Finally, problems are not only stored in the problem database,

44
00:02:48,000 --> 00:02:53,000
but that may also be test cases, which reproduce the exact problem.

45
00:02:53,000 --> 00:02:56,000
As a rule of thumb, as soon as you do have a test case

46
00:02:56,000 --> 00:03:02,000
that reproduces the problem, the test case makes the problem report obsolete.

47
00:03:02,000 --> 00:03:08,000
That is, as soon as you have a test case you can actually put a special flag

48
00:03:08,000 --> 99:59:59,000
on the problem database that the problem is now being addressed by the test.
