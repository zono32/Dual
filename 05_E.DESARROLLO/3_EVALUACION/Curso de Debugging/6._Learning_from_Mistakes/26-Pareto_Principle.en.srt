1
00:00:00,000 --> 00:00:06,000
We have created such distributions for several systems--

2
00:00:06,000 --> 00:00:14,000
at Microsoft, at Google, at SAP, and on many open source programs.

3
00:00:14,000 --> 00:00:19,000
What we always found was the so-called Pareto principle--

4
00:00:19,000 --> 00:00:26,000
that is, 20% of all modules contain 80% of the bugs.

5
00:00:26,000 --> 00:00:29,000
The numbers vary from project to project,

6
00:00:29,000 --> 00:00:36,000
but what we always found was there was a relatively small number of modules

7
00:00:36,000 --> 00:00:42,000
that would contain lots and lots of issues.

8
00:00:42,000 --> 00:00:48,000
Initially, we were just excited of being able to create such distributions more or less

9
00:00:48,000 --> 00:00:54,000
at the touch of a button, but as you look at these distributions

10
00:00:54,000 --> 00:00:59,000
you begin to wonder where do these bugs actually come from?

11
00:00:59,000 --> 00:01:04,000
Do these modules that actually are specifically bug prone

12
00:01:04,000 --> 00:01:07,000
have something in common?

13
00:01:07,000 --> 00:01:15,000
If they do have something in common, could we use this very feature to make predictions?

14
00:01:15,000 --> 00:01:21,000
We dug a bit deeper and checked a number of interesting features.

15
00:01:21,000 --> 00:01:27,000
The first question we ask is does the bug density correlate with the experience

16
00:01:27,000 --> 00:01:30,000
of the developers that wrote the programs.

17
00:01:30,000 --> 00:01:36,000
That is, possibly more experienced developers make fewer mistakes.

18
00:01:36,000 --> 00:01:43,000
For these questions I'm going to ask you for a guess on your side.

19
00:01:43,000 --> 00:01:46,000
These will not be rated.

20
00:01:46,000 --> 99:59:59,000
So, what do you think? Does bug density correlate with developer experience, yes or no?
