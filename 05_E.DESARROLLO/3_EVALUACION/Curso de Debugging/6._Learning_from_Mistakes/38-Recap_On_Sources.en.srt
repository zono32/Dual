1
00:00:00,000 --> 00:00:04,000
So, we have looked at individual developers and past bugs,

2
00:00:04,000 --> 00:00:11,000
at complexity, at tests, at team structure, and at the problem domain.

3
00:00:11,000 --> 00:00:16,000
Developers get assigned to tasks that are hard in the first place,

4
00:00:16,000 --> 00:00:20,000
and tasks that are hard call for more bugs.

5
00:00:20,000 --> 00:00:23,000
That is, also more past bugs.

6
00:00:23,000 --> 00:00:26,000
Also, more testing.

7
00:00:26,000 --> 00:00:31,000
All of this leads us to the domain as being the most important factor

8
00:00:31,000 --> 00:00:36,000
in determining where bugs actually come from.

9
00:00:36,000 --> 00:00:41,000
If the domain changes frequently, this will lead to more bugs.

10
00:00:41,000 --> 00:00:50,000
If the domain is complex in itself, such as JavaScript or in eclipse the compiler,

11
00:00:50,000 --> 00:00:53,000
this will lead to more bugs.

12
00:00:53,000 --> 00:00:56,000
If the domain is not well-defined--

13
00:00:56,000 --> 00:01:02,000
for instance, because the team cannot agree on what to do--

14
00:01:02,000 --> 00:01:06,000
then this also calls for more bugs.

15
00:01:06,000 --> 00:01:11,000
What we can do, though, is by looking at past bugs,

16
00:01:11,000 --> 00:01:18,000
identify which parts of the domain and possibly other influences

17
00:01:18,000 --> 00:01:21,000
correlate with past bugs.

18
00:01:21,000 --> 99:59:59,000
This may give us a handle on how to avoid such mistakes in the future.
