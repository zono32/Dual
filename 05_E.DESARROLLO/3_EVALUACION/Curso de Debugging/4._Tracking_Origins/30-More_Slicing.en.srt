1
00:00:00,000 --> 00:00:03,000
So here again we have our dynamic trace,

2
00:00:03,000 --> 00:00:05,000
now a bit bigger.

3
00:00:05,000 --> 00:00:10,000
Remember that the input was double quote followed by a less-than sign.

4
00:00:10,000 --> 00:00:16,000
What we get in the end is the output, which is just the less-than sign.

5
00:00:16,000 --> 00:00:21,000
In the dynamic trace, we can now, again, follow back the dependency.

6
00:00:21,000 --> 00:00:24,000
For instance, from out--out is being read here.

7
00:00:24,000 --> 00:00:26,000
Where was it last written?

8
00:00:26,000 --> 00:00:29,000
That's over here, so this depends on this earlier statement.

9
00:00:29,000 --> 00:00:31,000
Here we have out that's being read.

10
00:00:31,000 --> 00:00:34,000
Now in the dynamic trace you can actually follow this whole thing

11
00:00:34,000 --> 00:00:38,000
and see where it was last written, again,

12
00:00:38,000 --> 00:00:40,000
which is up here.

13
00:00:40,000 --> 00:00:44,000
And here we have the character c, which stems from the second iteration of the for loop.

14
00:00:44,000 --> 00:00:49,000
And this relates to s, which depends on the input.

15
00:00:49,000 --> 00:00:53,000
So, again, we have a chain of dependencies: out going up here,

16
00:00:53,000 --> 00:00:55,000
up here, up here, up here,

17
00:00:55,000 --> 00:00:58,000
and you can also see this as a cause-effect chain.

18
00:00:58,000 --> 00:01:03,000
S had this value; therefore, c became a less-than sign,

19
00:01:03,000 --> 00:01:10,000
which was edited out, which finally resulted in the input also having a less-than sign.

20
00:01:10,000 --> 00:01:15,000
Again, we can use these dependencies to build a slice.

21
00:01:15,000 --> 00:01:18,000
However, now the slice would be a dynamic slice

22
00:01:18,000 --> 00:01:22,000
because it is built on the dynamic trace.

23
00:01:22,000 --> 00:01:25,000
Starting with the assert statement,

24
00:01:25,000 --> 00:01:30,000
we see that out=out+c is being executed,

25
00:01:30,000 --> 00:01:32,000
and therefore part of our slice.

26
00:01:32,000 --> 00:01:36,000
We see that the initialization of out is part of our slice

27
00:01:36,000 --> 00:01:39,000
We see that the for loop is part of our slice.

28
00:01:39,000 --> 00:01:43,000
And, of course, when we call "remove HTML markup"

29
00:01:43,000 --> 00:01:47,000
where s is being set, this also becomes part of our dynamic slice.

30
00:01:47,000 --> 00:01:50,000
So far we only looked at dynamic data dependencies,

31
00:01:50,000 --> 00:01:53,000
but of course there are also dynamic control dependencies.

32
00:01:53,000 --> 00:01:59,000
Every condition that gets evaluated, that is, executed and controlled

33
00:01:59,000 --> 00:02:02,000
whether a statement in question is executed or not,

34
00:02:02,000 --> 00:02:04,000
builds a dynamic-control dependency.

35
00:02:04,000 --> 00:02:07,000
Therefore, since we executed out=out+c,

36
00:02:07,000 --> 00:02:11,000
the controlling conditions are also part of the dynamic slice.

37
00:02:11,000 --> 00:02:16,000
From these conditions, we again get more dynamic data dependencies,

38
00:02:16,000 --> 00:02:20,000
which you can look up, again, in our dynamic trace.

39
00:02:20,000 --> 00:02:24,000
For instance, here the tag variable, which is being read over here,

40
00:02:24,000 --> 00:02:26,000
was last set up here.

41
00:02:26,000 --> 00:02:32,000
Therefore, this condition is data-dependent on this initialization.

42
00:02:32,000 --> 00:02:34,000
So here's a quiz.

43
00:02:34,000 --> 00:02:40,000
Which other statements in the program are also part of the dynamic slice?

44
00:02:40,000 --> 00:02:43,000
Is it quote=false?

45
00:02:43,000 --> 00:02:45,000
Is it tag=true?

46
00:02:45,000 --> 00:02:47,000
Is it tag=false?

47
00:02:47,000 --> 99:59:59,000
Or is it quote=not quote?
