1
00:00:00,000 --> 00:00:02,000
Indeed, with this fix applied,

2
00:00:02,000 --> 00:00:05,000
the assertion can no longer fail.

3
00:00:05,000 --> 00:00:07,000
This is how the argument goes.

4
00:00:07,000 --> 00:00:09,000
In order to for the assertion to fail,

5
00:00:09,000 --> 00:00:12,000
the out variable must contain a less than sign.

6
00:00:12,000 --> 00:00:16,000
Since this is the only place where characters are being added,

7
00:00:16,000 --> 00:00:18,000
tag cannot be set.

8
00:00:18,000 --> 00:00:20,000
The quote variable; however, must be set,

9
00:00:20,000 --> 00:00:22,000
because otherwise, we would have gone

10
00:00:22,000 --> 00:00:24,000
in that first branch over here.

11
00:00:24,000 --> 00:00:27,000
But then quote can only be set in this very location,

12
00:00:27,000 --> 00:00:29,000
but this can't be the case

13
00:00:29,000 --> 00:00:30,000
because from step 2,

14
00:00:30,000 --> 00:00:33,000
we already know that tag cannot be set,

15
00:00:33,000 --> 00:00:36,000
and therefore, we have a contradiction between the 2,

16
00:00:36,000 --> 00:00:38,000
which means that the assertion will never fail.

17
00:00:38,000 --> 00:00:41,000
Quote erat demonstratum

18
00:00:41,000 --> 00:00:43,000
meaning what was shown to be proved.

19
00:00:43,000 --> 00:00:45,000
This was a nice proof, wasn't it?

20
00:00:45,000 --> 00:00:49,000
I must confess that I don't entirely trust my own proof.

21
00:00:49,000 --> 00:00:52,000
It's very much like in the quote of Don Knuth

22
00:00:52,000 --> 00:00:55,000
who once said beware of bugs in the above code.

23
00:00:55,000 --> 00:00:58,000
I have only proven it correct, not tried it.

24
00:00:58,000 --> 00:01:00,000
So in order to check whether my code

25
00:01:00,000 --> 00:01:03,000
now would be really correct with respect to this assertion,

26
00:01:03,000 --> 00:01:07,000
I went and used an automated deduction tool.

27
00:01:07,000 --> 00:01:09,000
The tool I was using is named Pex.

28
00:01:09,000 --> 00:01:12,000
This is a experimental tool for Microsoft research,

29
00:01:12,000 --> 00:01:14,000
which is a very, very thorough tester,

30
00:01:14,000 --> 00:01:18,000
which gets possible inputs from the program code.

31
00:01:18,000 --> 00:01:21,000
So Pex does the same deduction steps as

32
00:01:21,000 --> 00:01:24,000
Sherlock Holmes would do or as I would do or as you would do

33
00:01:24,000 --> 00:01:26,000
in order to come up with inputs

34
00:01:26,000 --> 00:01:29,000
that cause a built in assertion to fail.

35
00:01:29,000 --> 00:01:32,000
And my idea was, if Pex doesn't find anything,

36
00:01:32,000 --> 00:01:34,000
then chances are my program is really correct.

37
00:01:34,000 --> 00:01:36,000
Let's go and see Pex in action.

38
00:01:36,000 --> 00:01:40,000
The Pex tool has its own webpage where you can try it out.

39
00:01:40,000 --> 00:01:45,000
It's called www.pexforfun.com.

40
00:01:45,000 --> 00:01:48,000
Here you can enter a code

41
00:01:48,000 --> 00:01:51,000
which you want to be tested automatically by Pex.

42
00:01:51,000 --> 00:01:54,000
And sense Pex works for the languages

43
00:01:54,000 --> 00:01:57,000
C sharp, visual basic, and F sharp,

44
00:01:57,000 --> 00:02:01,000
I converted our remove HTML markup function into C sharp.

45
00:02:01,000 --> 00:02:04,000
Here you see the function, I have renamed it to puzzle

46
00:02:04,000 --> 00:02:06,000
in order to match the Pex for fun conventions.

47
00:02:06,000 --> 00:02:08,000
Here is the precondition.

48
00:02:08,000 --> 00:02:11,000
The string that has passed must not be now,

49
00:02:11,000 --> 00:02:13,000
which is a special C sharp thing.

50
00:02:13,000 --> 00:02:16,000
And here we have the loop over all the individual elements,

51
00:02:16,000 --> 00:02:18,000
setting tag and setting quote,

52
00:02:18,000 --> 00:02:20,000
or adding the characters to the result.

53
00:02:20,000 --> 00:02:22,000
At the end, we have an assertion.

54
00:02:22,000 --> 00:02:26,000
The result must not contain a less than character.

55
00:02:26,000 --> 00:02:28,000
Let's first try this out on the buggy version

56
00:02:28,000 --> 00:02:31,000
and let's see whether Pex can find the bug.

57
00:02:31,000 --> 00:02:33,000
We click on ask Pex,

58
00:02:33,000 --> 00:02:36,000
and now you see a number of interesting inputs,

59
00:02:36,000 --> 00:02:39,000
and these would all be inputs which cover various parts of the code.

60
00:02:39,000 --> 00:02:42,000
At the very end, what you see here,

61
00:02:42,000 --> 00:02:43,000
is an error message.

62
00:02:43,000 --> 00:02:46,000
The assertion has failed,

63
00:02:46,000 --> 00:02:48,000
and the assertion fails precisely on our buggy input,

64
00:02:48,000 --> 00:02:52,000
double quote followed by a less than sign.

65
00:02:52,000 --> 00:02:55,000
So Pex has been able, by going through the code,

66
00:02:55,000 --> 00:02:57,000
to come up with the exact same failing input

67
00:02:57,000 --> 00:02:59,000
as in our deduction example.

68
00:02:59,000 --> 00:03:01,000
Now I have gone and fixed the program.

69
00:03:01,000 --> 00:03:03,000
The question is whether Pex can now

70
00:03:03,000 --> 00:03:06,000
find an input that makes the assertion fail.

71
00:03:06,000 --> 00:03:08,000
And again, we ask Pex.

72
00:03:08,000 --> 00:03:10,000
And again, it comes up with a number of interesting inputs.

73
00:03:10,000 --> 00:03:13,000
All of these interesting inputs cause the program to run properly.

74
00:03:13,000 --> 00:03:16,000
That is, despite its best efforts,

75
00:03:16,000 --> 00:03:19,000
and Pex is really, really good in detecting errors,

76
00:03:19,000 --> 00:03:22,000
Pex has not found a single input

77
00:03:22,000 --> 00:03:24,000
which causes the assertion to fail.

78
00:03:24,000 --> 00:03:28,000
So for the fixed program, even Pex says this is correct,

79
00:03:28,000 --> 00:03:31,000
and I myself also have said this is correct.

80
00:03:31,000 --> 00:03:35,000
If you don't believe an automated deduction tool, you can believe me,

81
00:03:35,000 --> 00:03:39,000
and if you don't believe me, you can believe an automated deduction tool.

82
00:03:39,000 --> 99:59:59,000
Together we create a big deal of confidence in this program.
