1
00:00:00,000 --> 00:00:06,000
In our example, the dynamic slice simply excluded only 2 lines out of the program,

2
00:00:06,000 --> 00:00:08,000
namely these 2 lines.

3
00:00:08,000 --> 00:00:11,000
This may not sound like much in terms of reduction.

4
00:00:11,000 --> 00:00:16,000
In a larger program, however, a dynamic slice can reduce

5
00:00:16,000 --> 00:00:19,000
the number of statements to look at considerably.

6
00:00:19,000 --> 00:00:22,000
First, they contain only executed lines.

7
00:00:22,000 --> 00:00:25,000
That is, lines that are executed don't become part of the

8
00:00:25,000 --> 00:00:28,000
dynamic slice in the first place.

9
00:00:28,000 --> 00:00:33,000
And, of course, a line that's never executed can't have anything to do with a bug.

10
00:00:33,000 --> 00:00:36,000
It may have something to do with a fix, though.

11
00:00:36,000 --> 00:00:41,000
Second, they only contain statements that actually influence the output.

12
00:00:41,000 --> 00:00:45,000
If your output contains several independent parts,

13
00:00:45,000 --> 00:00:48,000
then a dynamic slice of just that part

14
00:00:48,000 --> 00:00:52,000
will be much, much smaller than the entire program.

15
00:00:52,000 --> 00:00:57,000
In 2010, we did a study on 7 bugs in Java programs

16
00:00:57,000 --> 00:01:01,000
and measured how big their dynamic slices would be.

17
00:01:01,000 --> 00:01:06,000
To start with, on average only 7.3% of the lines

18
00:01:06,000 --> 00:01:08,000
were actually executed,

19
00:01:08,000 --> 00:01:11,000
which means that a simple coverage tool

20
00:01:11,000 --> 00:01:15,000
which tells you which statements are executed and which ones are not

21
00:01:15,000 --> 00:01:21,000
will really focus the search to a very small part of the program.

22
00:01:21,000 --> 00:01:23,000
When looking at the dynamic slice,

23
00:01:23,000 --> 00:01:26,000
the reduction in size becomes even more apparent

24
00:01:26,000 --> 00:01:31,000
because, again, on average the dynamic slice encompassed only 2.8%

25
00:01:31,000 --> 00:01:33,000
of the lines in the program.

26
00:01:33,000 --> 00:01:36,000
Since there are nice tools available

27
00:01:36,000 --> 00:01:39,000
which compute dynamic slices automatically,

28
00:01:39,000 --> 00:01:42,000
using such a tool in the first place will immediately tell you

29
00:01:42,000 --> 00:01:46,000
which places of the program you can safely ignore

30
00:01:46,000 --> 00:01:51,000
because they are not executed or because they cannot possibly have influenced

31
00:01:51,000 --> 99:59:59,000
the output with respect to the bug.
