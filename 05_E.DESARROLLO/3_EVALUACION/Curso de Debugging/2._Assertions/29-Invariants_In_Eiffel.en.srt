1
00:00:00,000 --> 00:00:04,000
If you find that all these invariant checkers become tedious to write,

2
00:00:04,000 --> 00:00:10,000
you may consider a language where invariants, pre and post conditions, are all built in.

3
00:00:10,000 --> 00:00:13,000
This is the case in Bertrand Meyer's Eiffel language.

4
00:00:13,000 --> 00:00:17,000
In Eiffel, invariants become part of the classes.

5
00:00:17,000 --> 00:00:21,000
The invariant also unnamed, so if an invariant is violated,

6
00:00:21,000 --> 00:00:24,000
the name of the invariant becomes part of the diagnostic message.

7
00:00:24,000 --> 00:00:28,000
Here we have root has no parent and what this does is simply checks

8
00:00:28,000 --> 00:00:33,000
where the root attribute is a valid pointer--that is, it's not a void pointer.

9
00:00:33,000 --> 00:00:39,000
This is unequal in Eiffel, and this is what another language is called a null pointer.

10
00:00:39,000 --> 00:00:44,000
Here we have the invariant root is black and it simply checks the color attribute

11
00:00:44,000 --> 00:00:48,000
of the root note to be black and of course, there's more to it.

12
00:00:48,000 --> 00:00:52,000
Once you have defined such an invariant, the invariant will be automatically checked.

13
00:00:52,000 --> 00:00:57,000
Actually, it will be checked precisely according to the rules we set up previously.

14
00:00:57,000 --> 00:01:01,000
Do you still remember them? So when does Eiffel check its invariants?

15
00:01:01,000 --> 00:01:06,000
Is it whenever some class attribute is read, whenever some attribute is written,

16
00:01:06,000 --> 00:01:14,000
at the beginning of each public method in the class, or is it at the end of each public method?

17
00:01:14,000 --> 99:59:59,000
Check all that apply.
