1
00:00:00,000 --> 00:00:04,000
So in case an assert function would not be available in your language,

2
00:00:04,000 --> 00:00:07,000
you could easily roll out your own.

3
00:00:07,000 --> 00:00:12,000
I'm coming up with my own assert function which I call "my own assert" takes the condition.

4
00:00:12,000 --> 00:00:15,000
If the condition is false, then we raise an assertion error.

5
00:00:15,000 --> 00:00:20,000
Now, if I invoke say "my own assert" on 2+2=4,

6
00:00:20,000 --> 00:00:25,000
very simple test, we can run this and well, nothing happens because the assertion is met.

7
00:00:25,000 --> 00:00:28,000
However, if we assume the 2+2=5,

8
00:00:28,000 --> 00:00:33,000
we can run this and we get an assertion error that's being raised in here,

9
00:00:33,000 --> 00:00:38,000
and this gives us almost the same functionality as the built-in assertions.

10
00:00:38,000 --> 00:00:41,000
While you can easily roll out your own assertion,

11
00:00:41,000 --> 00:00:45,000
built-in assertions typically do have a couple of advantages.

12
00:00:45,000 --> 00:00:51,000
There is identification--the built-in assertion typically tells you which assertion failed.

13
00:00:51,000 --> 00:00:56,000
There is location that tell you where the assertion failed--that is where in the code.

14
00:00:56,000 --> 00:01:00,000
They are optional--meaning that they can be turned on or off

15
00:01:00,000 --> 00:01:05,000
although turning assertions off is mostly a bad idea, which we will discuss later.

16
00:01:05,000 --> 00:01:08,000
And finally, they're standardized--meaning that

17
00:01:08,000 --> 00:01:14,000
everybody can immediately recognize an assertion as such because they always take the same form.

18
00:01:14,000 --> 00:01:16,000
In the languages C and C++ for instance,

19
00:01:16,000 --> 00:01:21,000
assertions come with a built-in function named "assert" as in Python

20
00:01:21,000 --> 00:01:25,000
which you get by including a special file assert.h,

21
00:01:25,000 --> 00:01:29,000
and then, as in Python, you use assert except that you put the argument in parenthesis,

22
00:01:29,000 --> 00:01:34,000
and again, you pass the condition as an argument to the assert function.

23
00:01:34,000 --> 00:01:37,000
If this assertion failed, you're going to get a message on the console

24
00:01:37,000 --> 00:01:39,000
right before the program exits,

25
00:01:39,000 --> 00:01:44,000
and the message will look something like this--there you go.

26
00:01:44,000 --> 00:01:50,000
And now, you can see that the message actually has everything we wanted in our built-in assertions.

27
00:01:50,000 --> 00:01:56,000
So first, the failing assertion is identified down here as coming directly from the code.

28
00:01:56,000 --> 00:01:59,000
You see the location here--it's in the file foo.c in line 9.

29
00:01:59,000 --> 00:02:02,000
In C and C++, assertions are optional,

30
00:02:02,000 --> 00:02:06,000
you can turn them on and off using a simple argument to the compiler,

31
00:02:06,000 --> 00:02:11,000
and finally, they're standardized if you include assert.h, that's always the form,

32
00:02:11,000 --> 99:59:59,000
and this is what programmers look for and this is what programmers understand.
