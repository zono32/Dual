1
00:00:00,000 --> 00:00:04,000
Welcome back again. This is the second unit in the debugging course.

2
00:00:04,000 --> 00:00:10,000
This topic is asserting expectations. Today, we will go and explore assertions.

3
00:00:10,000 --> 00:00:15,000
That is statements in the program that automatically check for errors during execution.

4
00:00:15,000 --> 00:00:19,000
Assertions are by far the most powerful debugging tool,

5
00:00:19,000 --> 00:00:23,000
in particular, because they are the key to automating debugging.

6
00:00:23,000 --> 00:00:25,000
That is debug while you sleep.

7
00:00:25,000 --> 00:00:30,000
If debugging were a video game and you would be hunted by bugs,

8
00:00:30,000 --> 00:00:39,000
then assertions would be a power pill that would help you catch all the bugs.

9
00:00:39,000 --> 00:00:43,000
Okay, specifically, we are going to learn how to learn how to write assertions,

10
00:00:43,000 --> 00:00:49,000
how to check assertions, and how to infer assertion from executions automatically.

11
00:00:49,000 --> 00:00:52,000
In our last lecture, we already had met the assert keyword from Python.

12
00:00:52,000 --> 00:00:57,000
Generally speaking, the statement assert condition, evaluates the condition,

13
00:00:57,000 --> 00:01:02,000
and then its behavior depends on whether the condition evaluates the true or to fault.

14
00:01:02,000 --> 00:01:06,000
If the condition holds, we proceed as usual.

15
00:01:06,000 --> 00:01:08,000
If the condition does not hold, however,

16
00:01:08,000 --> 00:01:12,000
then we interrupt program execution by throwing an exception.

17
00:01:12,000 --> 00:01:17,000
When you're writing your condition, you assume that condition will hold.

18
00:01:17,000 --> 00:01:20,000
This is normally useful when you're writing a test.

19
00:01:20,000 --> 00:01:23,000
For instance, if we want to test the function square root,

20
00:01:23,000 --> 00:01:30,000
we can write a test function that asserts the √4 is 2 and √9 is 3,

21
00:01:30,000 --> 00:01:35,000
and if any of these tests fail, that is if the result of √4 is not 2,

22
00:01:35,000 --> 00:01:39,000
then the assertion will fail and throw an exception.

23
00:01:39,000 --> 00:01:44,000
Such a functionality of assertion is available in all programming languages.

24
00:01:44,000 --> 99:59:59,000
You could even write your own assert function.
