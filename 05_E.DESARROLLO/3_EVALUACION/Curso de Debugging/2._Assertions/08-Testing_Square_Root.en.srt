1
00:00:00,000 --> 00:00:05,000
If you have assertions in your code, not only can you detect errors much more easily

2
00:00:05,000 --> 00:00:08,000
but you can also test your code much more thoroughly.

3
00:00:08,000 --> 00:00:12,000
In particular, you can separate two things. A test consists of two parts.

4
00:00:12,000 --> 00:00:16,000
First we need to generate on execution and second we need to check the outcome.

5
00:00:16,000 --> 00:00:20,000
With assertions in your code, checking the results is already done

6
00:00:20,000 --> 00:00:22,000
so we can focus on generating the tests.

7
00:00:22,000 --> 00:00:26,000
Let me illustrate with a very, very simple example.

8
00:00:26,000 --> 00:00:31,000
The idea is that we're going to take a square root function with assertions integrated

9
00:00:31,000 --> 00:00:34,000
and just use random testing to test it.

10
00:00:34,000 --> 00:00:38,000
Here's a very, very simple implementation of the square root function.

11
00:00:38,000 --> 00:00:42,000
We simply invert the built-in Python square root function from the math module,

12
00:00:42,000 --> 00:00:47,000
and we have set up appropriate assertions to check for the precondition and for the post condition

13
00:00:47,000 --> 00:00:51,000
Now for the test driver, I have set up a loop with 1000 iterations

14
00:00:51,000 --> 00:01:00,000
and we generate random numbers in the range of 0 to 9,999.99.

15
00:01:00,000 --> 00:01:05,000
This is random with random function which returned a value between 0 and 1.

16
00:01:05,000 --> 00:01:08,000
This is the floating point number and it comes from the random module

17
00:01:08,000 --> 00:01:14,000
and then when we feed this random number into a square root function turning assuming the result in z

18
00:01:14,000 --> 00:01:17,000
Note that we don't do any assertions down here

19
00:01:17,000 --> 00:01:20,000
because the assertions up here have already take care of everything.

20
00:01:20,000 --> 00:01:22,000
When all test are successful, we print out done.

21
00:01:22,000 --> 00:01:26,000
So this is our test and the question is, what's going to happen?

22
00:01:26,000 --> 00:01:31,000
Is it the program terminates gracefully, output is done, all test are fast.

23
00:01:31,000 --> 00:01:38,000
Is it that the square root precondition fail? Is it that the square root post condition fails?

24
00:01:38,000 --> 99:59:59,000
Or thinking of Python, do we see something completely different. Over to you.
