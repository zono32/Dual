1
00:00:00,000 --> 00:00:05,000
Thank you very much. Now let's go for the answer. Let us discuss the options one by one.

2
00:00:05,000 --> 00:00:09,000
First print this can't happen. Cool. It's going to go to the console.

3
00:00:09,000 --> 00:00:14,000
Probably going to go to some log but it is unlikely that anyone would ever notice this,

4
00:00:14,000 --> 00:00:19,000
and this means that our traffic light, well in our simulation, will be undefined stage,

5
00:00:19,000 --> 00:00:23,000
possibly meaning that the traffic will also be in some undefined state.

6
00:00:23,000 --> 00:00:28,000
What happens if we have multiple traffic lights and one of them is neither red nor yellow nor green?

7
00:00:28,000 --> 00:00:31,000
This is going to cause lots and lots of interesting issues.

8
00:00:31,000 --> 00:00:34,000
So simply printing this out to the console is not enough.

9
00:00:34,000 --> 00:00:40,000
This problem is too hard. We are violating the data invariant here, which also rules out the last option.

10
00:00:40,000 --> 00:00:45,000
That's not a good option. Now for the two remaining choices and this is a tough choice.

11
00:00:45,000 --> 00:00:50,000
We could have the assertion in here, assert fault, which would be nice but keep in mind

12
00:00:50,000 --> 00:00:53,000
that this could actually also be turned off--

13
00:00:53,000 --> 00:00:57,000
for instance, when invoking the Python interpreter with -0.

14
00:00:57,000 --> 00:01:01,000
However, in this particular situation, there's no reason to turn this assertion off

15
00:01:01,000 --> 00:01:06,000
because well, if it gets executed then it raises an exception immediately

16
00:01:06,000 --> 00:01:10,000
and if it does not get executed then everything is fine.

17
00:01:10,000 --> 00:01:13,000
We mean that by turning it off, we don't get any savings.

18
00:01:13,000 --> 00:01:17,000
So the better option is simply to raise assertion exception plain and sample

19
00:01:17,000 --> 00:01:22,000
and thereby to document that something is going really wrong in the program.

20
00:01:22,000 --> 00:01:26,000
This will not hurt performance at all obviously because it will only be triggered

21
00:01:26,000 --> 00:01:28,000
when all other checks already have failed.

22
00:01:28,000 --> 00:01:32,000
However, if these were the production program, you may wish to come up

23
00:01:32,000 --> 00:01:36,000
with some global try catch block in the program

24
00:01:36,000 --> 00:01:43,000
or in Python this would be a global try except block that would catch all assertion exceptions

25
00:01:43,000 --> 00:01:48,000
and then pop up a dialogue saying "Oh we encountered a fatal error" possibly offering

26
00:01:48,000 --> 00:01:54,000
some recovery mechanism or some ability to save the progress that was we've seen so far

27
00:01:54,000 --> 99:59:59,000
such that the user is not confronted simply with all of his work disappearing.
