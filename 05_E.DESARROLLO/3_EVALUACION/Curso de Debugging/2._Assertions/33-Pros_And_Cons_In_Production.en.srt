1
00:00:00,000 --> 00:00:04,000
Finally, it's always a good question whether assertions, in production code,

2
00:00:04,000 --> 00:00:06,000
should remain enabled or not.

3
00:00:06,000 --> 00:00:11,000
Here are some points to consider. First, failing is better than bad data.

4
00:00:11,000 --> 00:00:14,000
If your program fails with an assertion, you know that there's an error.

5
00:00:14,000 --> 00:00:18,000
If it simply produces a bad result without actually checking it,

6
00:00:18,000 --> 00:00:21,000
then this may have far worse consequences than failing.

7
00:00:21,000 --> 00:00:27,000
Second, the more active assertions there are, the easier it is for you to find the defect.

8
00:00:27,000 --> 00:00:30,000
Third, defects in the field are hard to track,

9
00:00:30,000 --> 00:00:36,000
which means an assertion gives you a chance to find the defect before it goes into the field,

10
00:00:36,000 --> 00:00:38,000
in particular, in combination with the raw testing.

11
00:00:38,000 --> 00:00:42,000
and even in the field, if assertion are still enabled,

12
00:00:42,000 --> 00:00:45,000
you still have a far better chance to find defects because,

13
00:00:45,000 --> 00:00:48,000
well, you get the failure rather than producing bad data.

14
00:00:48,000 --> 00:00:54,000
On the detractor side, so what speaks against assertions being amenably production code?

15
00:00:54,000 --> 00:00:57,000
We have performance, performance, performance.

16
00:00:57,000 --> 00:01:01,000
If you do have a large data structure with lots of global checks and leave this enabled,

17
00:01:01,000 --> 00:01:03,000
performance will suffer.

18
00:01:03,000 --> 00:01:08,000
However, there is large number of assertions which impact performance only in a marginal way.

19
00:01:08,000 --> 00:01:13,000
Checking some result is larger or equal than zero ranges like things.

20
00:01:13,000 --> 00:01:16,000
This will not impact performance in a measurable way.

21
00:01:16,000 --> 00:01:19,000
The answer here is to first leave the assertions on

22
00:01:19,000 --> 00:01:22,000
then measure which assertions actually do impact performance

23
00:01:22,000 --> 00:01:25,000
and possibly do turn this off and leave the others enabled.

24
00:01:25,000 --> 00:01:30,000
The second thing is asssertions, when they fail, typically caused the program to crash,

25
00:01:30,000 --> 00:01:33,000
or at least, aboard execution immediately.

26
00:01:33,000 --> 00:01:35,000
This is not very user friendly.

27
00:01:35,000 --> 00:01:38,000
You should give your users a chance to recover

28
00:01:38,000 --> 00:01:41,000
even if an assertion finds that something has gone wrong.

29
00:01:41,000 --> 00:01:47,000
But, then again, if your program crashes because of a failing assertion, what's the alternative?

30
00:01:47,000 --> 00:01:50,000
The alternative is to keep on working with bad data

31
00:01:50,000 --> 99:59:59,000
and bad data can produce obituary and even worse results later.
