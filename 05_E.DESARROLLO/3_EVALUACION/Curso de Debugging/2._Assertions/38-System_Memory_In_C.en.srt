1
00:00:00,000 --> 00:00:05,000
In Python having arbitrary read and write accesses all throughout the program

2
00:00:05,000 --> 00:00:08,000
towards a single location is rather uncommon.

3
00:00:08,000 --> 00:00:12,000
There are languages; however, where any function that execute

4
00:00:12,000 --> 00:00:19,000
can access any part of the memory on purpose and sometimes by accident.

5
00:00:19,000 --> 00:00:24,000
This is particular true for languages in which memory is under control by the programmer.

6
00:00:24,000 --> 00:00:27,000
Languages such as C and C++.

7
00:00:27,000 --> 00:00:35,000
To illustrate why languages such as C and C++, memory management can be a huge problem.

8
00:00:35,000 --> 00:00:40,000
Let me show you a short piece of C code that can cause lots and lots of trouble.

9
00:00:40,000 --> 00:00:45,000
In C and also C++, you obtain memory by calling a special function

10
00:00:45,000 --> 00:00:48,000
which is called malloc for memory allocator.

11
00:00:48,000 --> 00:00:51,000
When you invoke malloc, it gives us an argument the number of bytes

12
00:00:51,000 --> 00:00:54,000
that you'd like to have for your data structure.

13
00:00:54,000 --> 00:00:57,000
Strictly speaking, it's the number of characters, but let's skip that.

14
00:00:57,000 --> 00:01:01,000
The effect of this statement is that you'll be getting a chunk of bytes

15
00:01:01,000 --> 00:01:07,000
and you will get a pointer that points to the beginning of this allocated memory.

16
00:01:07,000 --> 00:01:10,000
What you actually have here is an array of 10 characters.

17
00:01:10,000 --> 00:01:16,000
You can write these characters one by one. For instance, in location no. 5, let's store an x.

18
00:01:16,000 --> 00:01:20,000
In C, as an other languages, the array start with an index of 0.

19
00:01:20,000 --> 00:01:27,000
So 5 is actually the sixth element in the array. We can also read elements from the array.

20
00:01:27,000 --> 00:01:34,000
For instance, we can access the 10th element of the array and store the resulting character in y.

21
00:01:34,000 --> 00:01:37,000
The only problem is there is no 10th character.

22
00:01:37,000 --> 00:01:43,000
The array has only 10 elements and this would be the 11th element.

23
00:01:43,000 --> 00:01:47,000
The behavior of the C program at this moment becomes undefined.

24
00:01:47,000 --> 00:01:53,000
That is anything can happen. It is possible that some completely random value is stored in y.

25
00:01:53,000 --> 00:01:59,000
This is actually the most likely outcome. It is also possible that the program immediately stops.

26
00:01:59,000 --> 00:02:05,000
It is also possible that your program all of a sudden transforms into an adventure game

27
00:02:05,000 --> 00:02:08,000
and allows you to explore the colossal caves.

28
00:02:08,000 --> 00:02:13,000
That's a very unlikely outcome but keep in mind that in one release of the GLU Compiler,

29
00:02:13,000 --> 00:02:16,000
the GLU programmers had some fun and stating--

30
00:02:16,000 --> 00:02:22,000
"Well, in undefined behavior, anything can happen, so let's simply go and make this a game."

31
00:02:22,000 --> 99:59:59,000
This was not very appreciated by the programmers.
