1
00:00:00,000 --> 00:00:08,000
Why does the post condition of square root fail? The answer is simple but not so simple.

2
00:00:08,000 --> 00:00:11,000
What we lack here is diagnostic information.

3
00:00:11,000 --> 00:00:16,000
We don't know the values of r or z or anything that happens in between.

4
00:00:16,000 --> 00:00:20,000
So what we do i, we set up a framework that allows us to access these.

5
00:00:20,000 --> 00:00:27,000
So what we have set here is we have set up a try except block around the square root function,

6
00:00:27,000 --> 00:00:31,000
which catches the assertion and when an assertion is being raised,

7
00:00:31,000 --> 00:00:37,000
or any other kind of error is being raised, we print out the offending parameter r

8
00:00:37,000 --> 00:00:42,000
and we exit the loop, so let's see what happens here if we invoke the whole thing.

9
00:00:42,000 --> 00:00:52,000
So here's the bad value, 8<i>436.9207865. Wow, magic value.</i>

10
00:00:52,000 --> 00:00:56,000
So why can't we just square this. What's wrong here.

11
00:00:56,000 --> 00:00:58,000
So we print out the value and now we go

12
00:00:58,000 --> 00:01:04,000
and actually square the square root and multiply it by itself.

13
00:01:04,000 --> 00:01:12,000
Let's see what we got--again, we run the whole thing and 2123.01753488

14
00:01:12,000 --> 00:01:17,000
and this is 2123.01753488.

15
00:01:17,000 --> 00:01:22,000
Well, by all means and measures, these two look identical to me.

16
00:01:22,000 --> 00:01:24,000
Why does the assertion above it failed.

17
00:01:24,000 --> 00:01:28,000
We can solve the mystery simply by looking at the actual difference between these two values.

18
00:01:28,000 --> 00:01:32,000
Let's see what the numerical difference is between

19
00:01:32,000 --> 00:01:35,000
the square root, square, and original value itself.

20
00:01:35,000 --> 00:01:40,000
Here comes another value which fails 9,049. something and here at the very end,

21
00:01:40,000 --> 00:01:47,000
you see the difference--it's 10^-12, meaning that 12 digits after the comma

22
00:01:47,000 --> 00:01:53,000
we do have a difference between r and the √r²

23
00:01:53,000 --> 00:01:55,000
The reason why this assertion failed as simply rounding error,

24
00:01:55,000 --> 00:01:59,000
the numbers are the same up to the 11th digit.

25
00:01:59,000 --> 99:59:59,000
At the 12th digit, it is actually are different and this is why the assertion failed.
