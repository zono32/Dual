1
00:00:00,000 --> 00:00:05,800
At the end of the day, we'd all prefer creating over debugging.

2
00:00:05,800 --> 00:00:08,380
So how can we avoid debugging in the first place?

3
00:00:08,380 --> 00:00:11,350
Here's some suggestions on what you can do.

4
00:00:11,350 --> 00:00:15,120
First thing, get your requirements right.

5
00:00:15,120 --> 00:00:22,600
Only if you know precisely what to do will you be able to know what not to do.

6
00:00:22,600 --> 00:00:30,820
That is, only with precise requirements will you be able to tell failure from success.

7
00:00:30,820 --> 00:00:34,910
A famous quote coming from Brian Kernighan:

8
00:00:34,910 --> 00:00:39,880
"Without specification, there are no bugs--only surprises."

9
00:00:39,880 --> 00:00:43,990
So you could think that if you have no specifications,

10
00:00:43,990 --> 00:00:46,660
then you wouldn't have to do any debugging.

11
00:00:46,660 --> 00:00:51,720
Unfortunately, surprises need to be debugged just as well,

12
00:00:51,720 --> 00:00:55,150
except that debugging surprises is harder

13
00:00:55,150 --> 00:00:59,090
because you don't know how they would not surprise you.

14
00:00:59,090 --> 00:01:03,160
Increase precision and automation--next suggestion.

15
00:01:03,160 --> 00:01:06,700
In the end, you do have this huge program

16
00:01:06,700 --> 00:01:11,070
and you want to be able to find as many bugs as possible.

17
00:01:11,070 --> 00:01:18,040
Of course you can have developers read it, review it, test it,

18
00:01:18,040 --> 00:01:24,560
but in the end, the time of your developers will always be a precious resource.

19
00:01:24,560 --> 00:01:28,820
In other words, you won't have the developers, you won't have the time,

20
00:01:28,820 --> 00:01:31,570
and so you'll be pressed to ship anyway.

21
00:01:31,570 --> 00:01:37,600
If you can automate these tasks, then resources will be much less of a problem

22
00:01:37,600 --> 00:01:42,850
because you can have an arbitrary number of computers doing the checking for you.

23
00:01:42,850 --> 00:01:48,580
This calls for techniques such a contracts, assertions, or other forms of specification

24
00:01:48,580 --> 00:01:51,880
that can be validated automatically,

25
00:01:51,880 --> 00:01:55,920
plus, of course, lots of automated testing that follows.

26
00:01:55,920 --> 00:01:59,900
The next step is to reduce complexity.

27
00:01:59,900 --> 00:02:03,030
The higher the structural complexity of a program,

28
00:02:03,030 --> 00:02:08,210
the more ways there is for some part of a program to influence another

29
00:02:08,210 --> 00:02:11,360
and the easier it is for infections to spread.

30
00:02:11,360 --> 00:02:19,190
Plus the higher the complexity in a program, the more possible sources for infections there are,

31
00:02:19,190 --> 00:02:22,440
and all of this makes debugging way harder.

32
00:02:22,440 --> 00:02:25,220
Next step, set up assertions.

33
00:02:25,220 --> 00:02:30,910
Every single assertion rules out large parts of the program or of the program state

34
00:02:30,910 --> 00:02:33,600
as an infection cause.

35
00:02:33,600 --> 00:02:40,510
And the more assertions you set up, the less state and statements do you have to examine

36
00:02:40,510 --> 00:02:43,990
in order to figure out where the infection came from.

37
00:02:43,990 --> 00:02:47,420
Next thing, test early and test often.

38
00:02:47,420 --> 00:02:52,180
The earlier you test, the more precise your specification will be.

39
00:02:52,180 --> 00:02:56,190
And the more you test, the more defects you will catch right away.

40
00:02:56,190 --> 00:03:04,210
Plus, if you test frequently, you will be able to isolate the change that led to the test failing

41
00:03:04,210 --> 00:03:08,050
by building on the past history of successful tests.

42
00:03:08,050 --> 00:03:13,250
Next, review your code or have it reviewed by your colleagues.

43
00:03:13,250 --> 00:03:18,400
Having your code being inspected by others has been shown again and again

44
00:03:18,400 --> 00:03:25,140
to significantly increase productivity, quality, and project stability.

45
00:03:25,140 --> 00:03:30,510
Next step, go and analyze the problem history of your project

46
00:03:30,510 --> 00:03:37,970
in order to figure out which components have shown risk in the past and which ones haven't.

47
00:03:37,970 --> 00:03:45,270
Obviously, components that had troubles in the past would always be the first ones to focus on

48
00:03:45,270 --> 00:03:48,170
as it comes to improving quality.

49
00:03:48,170 --> 00:03:52,730
Analyze their history, their common features, common causes,

50
00:03:52,730 --> 00:03:55,890
and adjust the development process accordingly.

51
00:03:55,890 --> 00:03:59,370
Last, learn from your mistakes.

52
00:03:59,370 --> 00:04:02,030
Every bug you make is a bug too many.

53
00:04:02,030 --> 00:04:08,390
Improve your development process such that bugs are caught as quickly as possible.

54
00:04:08,390 --> 99:59:59,000
If a bug escapes into production, make sure it won't happen again.
